<?xml version="1.0"?>
<robot name="atvurdf" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value="1.168"/>
  <xacro:property name="base_length" value="2.184"/>
  <xacro:property name="base_height" value="1.26"/>
	
  <!-- Define the shape of the robot's two back wheels in meters -->
  <xacro:property name="wheel_radius" value="0.347311"/>
  <xacro:property name="wheel_width" value="0.356"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="-1.02"/>

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0.425"/>

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.75"/>


  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 -0.3" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  
  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="0.05 0 0.05" />
      <geometry>
        <mesh filename="file://$(find atvurdf)/meshes/rigid_body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="Grey">
        <color rgba="${128} ${128} ${128} 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <mesh filename="file://$(find atvurdf)/meshes/rigid_body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="200.0" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  
  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->	
  <link name="base_footprint">
  	<xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
  </joint>

  <!-- *********************** DRIVE WHEEL BACK LEFT ******************************  -->
  <xacro:macro name="wheel_back_right" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_back_right prefix="drivewhl_b_r" x_reflect="-1" y_reflect="1" />

    <!-- *********************** DRIVE WHEEL BACK LEFT ******************************  -->
  <xacro:macro name="wheel_back_left" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_back_left prefix="drivewhl_b_l" x_reflect="-1" y_reflect="-1" />

      <!-- *********************** DRIVE WHEEL FRONT RIGHT ******************************  -->
  <xacro:macro name="wheel_front_right" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_front_right prefix="drivewhl_r_f" x_reflect="1" y_reflect="1" />

        <!-- *********************** DRIVE WHEEL FRONT LEFT ******************************  -->
  <xacro:macro name="wheel_front_left" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_front_left prefix="drivewhl_l_f" x_reflect="1" y_reflect="-1" />
  <gazebo>
		<plugin name='skid_steer_drive' filename='libgazebo_ros_diff_drive.so'>
			<ros>
				<namespace>  </namespace>
			</ros>

			<update_rate>30</update_rate>

			<num_wheel_pairs> 2 </num_wheel_pairs>

			<left_joint>drivewhl_l_f_joint</left_joint>
			<right_joint>drivewhl_r_f_joint</right_joint>
			<wheel_separation>0.914</wheel_separation>
			<wheel_diameter>0.694622</wheel_diameter>

			<left_joint>drivewhl_b_l_joint</left_joint>
			<right_joint>drivewhl_b_r_joint</right_joint>
			<wheel_separation>0.914</wheel_separation>
			<wheel_diameter>0.694622</wheel_diameter>

		 	<max_wheel_torque>100</max_wheel_torque>
		 	<max_wheel_acceleration>100</max_wheel_acceleration>	
			
			<publish_odom>false</publish_odom>
			<publish_odom_tf>true</publish_odom_tf>
			<publish_wheel_tf>true</publish_wheel_tf>
			
			<odometry_topic>odom</odometry_topic>
			<odometry_frame>odom</odometry_frame>
			<robot_base_frame>base_link</robot_base_frame>
		</plugin>
    </gazebo>

</robot>
