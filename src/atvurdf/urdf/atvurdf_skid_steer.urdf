<?xml version="1.0"?>
<robot name="atvurdf" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value="1.168"/>
  <xacro:property name="base_length" value="2.184"/>
  <xacro:property name="base_height" value="1.26"/>
	
  <!-- Define the shape of the robot's two back wheels in meters -->
  <xacro:property name="wheel_radius" value="0.347311"/>
  <xacro:property name="wheel_width" value="0.356"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="-1.02"/>

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0.425"/>

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.75"/>


  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 -0.3" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  
  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="0.05 0 0.05" />
      <geometry>
        <mesh filename="file://$(find atvurdf)/meshes/rigid_body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="Grey">
        <color rgba="${128} ${128} ${128} 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <mesh filename="file://$(find atvurdf)/meshes/rigid_body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="40.0" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  
  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->	
  <link name="base_footprint">
  	<xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
  </joint>

  <!-- *********************** DRIVE WHEEL BACK LEFT ******************************  -->
  <xacro:macro name="wheel_back_right" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Black">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_back_right prefix="drivewhl_b_r" x_reflect="-1" y_reflect="1" />

    <!-- *********************** DRIVE WHEEL BACK LEFT ******************************  -->
  <xacro:macro name="wheel_back_left" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="drivewhl_b_l_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_back_left prefix="drivewhl_b_l" x_reflect="-1" y_reflect="-1" />

      <!-- *********************** DRIVE WHEEL FRONT RIGHT ******************************  -->
  <xacro:macro name="wheel_front_right" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.5"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_right_front_wheels.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_front_right prefix="drivewhl_f_r" x_reflect="1" y_reflect="1" />

        <!-- *********************** DRIVE WHEEL FRONT LEFT ******************************  -->
  <xacro:macro name="wheel_front_left" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.0 0.0 0.0 0.8"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0"/> 
        <geometry>
          <mesh filename="file://$(find atvurdf)/meshes/rigid_left_front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel_front_left prefix="drivewhl_f_l" x_reflect="1" y_reflect="-1" />

 <!--********************** LASER SCAN *****************************************************  -->

   <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 1" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
 
    <collision>
      <origin xyz="0.835 0.02 0.44" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0" length="0.0"/>
      </geometry>
    </collision>
 
    <visual>
      <origin xyz="0.835 0.02 0.44" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0" length="0.0"/>
      </geometry>
    </visual>
  </link>
     
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0.215 0.0 0.30" rpy="0 0 0"/>
  </joint>
     
  <gazebo reference="lidar_link">
    <sensor name="lidar" type="ray">
      <origin xyz="0.0 1.0 0.0" rpy="0 0 0"/>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>120</samples>
            <resolution>1.000000</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>2</min>
          <max>15.0</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="lidar_link">
    <mu1>0.01</mu1>
    <mu2>0.01</mu2>
    <material>Gazebo/Black</material>
  </gazebo>


  <!--****************************VLP16***************************  -->
    <link name="velodyne_vlp16">
      <inertial>
        <pose>0 1 0 0 0 0 </pose>
        <mass value="0.125"/>
        <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
      </inertial>
  
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="0.0508" length="0.75"/>
        </geometry>
      </collision>
  
      <visual>
        <origin xyz="0.835 0.02 0.44" rpy="0 0 0"/>
        <geometry>
            <mesh filename="file://$(find atvurdf)/meshes/VLP16_base_1.dae" scale="1 1 1"/>
        </geometry>
      </visual>
      <visual>
        <origin xyz="0.835 0.02 0.44" rpy="0 0 0"/>
        <geometry>
            <mesh filename="file://$(find atvurdf)/meshes/VLP16_base_2.dae" scale="1 1 1"/>
        </geometry>
      </visual>
      <visual>
        <origin xyz="0.835 0.02 0.44" rpy="0 0 0"/>
        <geometry>
            <mesh filename="file://$(find atvurdf)/meshes/VLP16_scan.dae" scale="1 1 1"/>
        </geometry>
      </visual> 
    </link>

    <gazebo reference="velodyne_vlp16">
      <sensor type="ray" name="VLP16">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>10</update_rate>
        <always_on>true</always_on>
        <visualize>false</visualize>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1</resolution>
              <min_angle>-3.14159</min_angle>
              <max_angle>3.14159</max_angle>
            </horizontal>
            <vertical>
              <samples>16</samples>
              <resolution>1</resolution>
              <min_angle>-3.14159</min_angle>
              <max_angle>3.14159</max_angle>
            </vertical>
          </scan>
          <range>
            <min>1.5</min>
            <max>140.0</max>
            <resolution>0.001</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.0</stddev>
          </noise>
        </ray>
        <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_velodyne_laser.so">
          <topic_name>velodyne_points</topic_name>
          <frame_name>velodyne</frame_name>
          <min_range>1.0</min_range>
          <max_range>140.0</max_range>
          <gaussianNoise>0.008</gaussianNoise>
        </plugin>
      </sensor>
    </gazebo>


    <joint name="velodyne_vlp16_joint" type="fixed">
      <parent link="base_link"/>
      <child link="velodyne_vlp16"/>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>


    <gazebo>
        <plugin name="skid_steer_drive" filename="libgazebo_ros_diff_drive.so">

        <!-- wheels -->
        <num_wheel_pairs>2</num_wheel_pairs>
        <left_joint>drivewhl_f_l_joint</left_joint>
        <left_joint>drivewhl_b_l_joint</left_joint>
        <right_joint>drivewhl_f_r_joint</right_joint>
        <right_joint>drivewhl_b_r_joint</right_joint>

        <!-- kinematics -->
        <wheel_separation>0.914</wheel_separation>
        <wheel_diameter>0.694622</wheel_diameter>
        <max_wheel_torque>20.0</max_wheel_torque>
        <max_wheel_acceleration>10.0</max_wheel_acceleration>

        <wheel_separation>0.914</wheel_separation>
        <wheel_diameter>0.694622</wheel_diameter>
        <max_wheel_torque>20.0</max_wheel_torque>
        <max_wheel_acceleration>10.0</max_wheel_acceleration>

        <!-- odometry  --> 
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>

        <!-- topic & re remappings -->
        <ros>
            <namespace>/</namespace>
            <argument>/cmd_vel:=cmd_vel</argument>
            <argument>/odom:=odom</argument>
        </ros>

        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        <update_rate>100.0</update_rate>
        </plugin>
    </gazebo>


  <!--****************************IMU***************************  -->

  <link name="imu_link">
      <inertial>
        <origin xyz="0 0 1" rpy="0 0 0"/>
        <mass value="0.125"/>
        <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
      </inertial>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="0.0" length="0.0"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="0.0" length="0.0"/>
        </geometry>
      </visual>
    </link>
        
    <gazebo reference="imu_link">
      <sensor name="br_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="bytes_imu" filename="libgazebo_ros_imu_sensor.so">
            <ros>
                <namespace>imu</namespace>
                <remapping>~/out:=data</remapping>
            </ros>
            <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
      </sensor>
    </gazebo>

    <joint name="imu_joint" type="fixed">
      <parent link="base_link"/>
      <child link="imu_link"/>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>

<gazebo>
  <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
    <ros>
      <!-- <namespace>/br</namespace> -->
      <remapping>~/out:=joint_states</remapping>
    </ros>
    <update_rate>30</update_rate>
    <joint_name>drivewhl_f_r_joint</joint_name>
    <joint_name>drivewhl_f_l_joint</joint_name>
    <joint_name>drivewhl_b_r_joint</joint_name>
    <joint_name>drivewhl_b_l_joint</joint_name>
  </plugin>
</gazebo>


</robot>


